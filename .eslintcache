[{"C:\\Users\\Sang\\url-to-word\\src\\index.js":"1","C:\\Users\\Sang\\url-to-word\\src\\reportWebVitals.js":"2","C:\\Users\\Sang\\url-to-word\\src\\App.js":"3","C:\\Users\\Sang\\url-to-word\\src\\URLtoWORD.js":"4","C:\\Users\\Sang\\url-to-word\\src\\firebase.js":"5"},{"size":500,"mtime":1608721278862,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1608721278862,"results":"8","hashOfConfig":"7"},{"size":152,"mtime":1610004988267,"results":"9","hashOfConfig":"7"},{"size":3205,"mtime":1610182571894,"results":"10","hashOfConfig":"7"},{"size":525,"mtime":1610007921813,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"j6a83a",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Sang\\url-to-word\\src\\index.js",[],["24","25"],"C:\\Users\\Sang\\url-to-word\\src\\reportWebVitals.js",[],"C:\\Users\\Sang\\url-to-word\\src\\App.js",[],"C:\\Users\\Sang\\url-to-word\\src\\URLtoWORD.js",["26"],"import React, { useEffect, useState } from \"react\";\r\nimport { Input } from \"antd\";\r\nimport \"./URLtoWORD.css\";\r\nimport firebase from \"./firebase\";\r\n\r\nconst { Search, TextArea } = Input;\r\nconst MAX_NUMBER = 99;\r\nconst wordArray = [\"사과\", \"수박\", \"딸기\", \"참외\", \"당근\", \"멜론\"];\r\nlet numberArray = [];\r\nfor (let i = 0; i <= MAX_NUMBER; i++) {\r\n  numberArray.push(i);\r\n}\r\n\r\nconst URLtoWORD = () => {\r\n  const [data, setData] = useState(\"\");\r\n  const [urlToWordValue, setUrlToWordValue] = useState(\"\");\r\n  const [wordToUrlValue, setWordToUrlValue] = useState(\"\");\r\n  const [urlValue, setUrlValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    firebase\r\n      .database()\r\n      .ref(\"datas\")\r\n      .once(\"value\", (snapshot) => {\r\n        snapshot.forEach((childSnapshot) => {\r\n          let childTimeStamp = childSnapshot.val().timestamp;\r\n          let currentTime = new Date().getTime();\r\n          if (currentTime - childTimeStamp >= 86400000) {\r\n            let deleteNode = childSnapshot.val().word;\r\n            firebase.database().ref(\"datas\").child(deleteNode).remove();\r\n          }\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      firebase.database().ref(\"datas\").child(data).set({\r\n        url: urlValue,\r\n        word: data,\r\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n      });\r\n      setWordToUrlValue(`'${data}' (으)로 변환되었습니다.`);\r\n    }\r\n  }, [data]);\r\n\r\n  const onChangeUrlToWord = (value) => {\r\n    setUrlValue(value);\r\n    firebase\r\n      .database()\r\n      .ref(\"datas\")\r\n      .once(\"value\", (snapshot) => {\r\n        let datas_length = snapshot.val()\r\n          ? Object.keys(snapshot.val()).length\r\n          : 0;\r\n        setData(\r\n          wordArray[parseInt(datas_length / MAX_NUMBER) % wordArray.length] +\r\n            numberArray[datas_length % MAX_NUMBER]\r\n        );\r\n      });\r\n  };\r\n\r\n  const onChangeWordToUrl = (value) => {\r\n    firebase\r\n      .database()\r\n      .ref(\"datas\")\r\n      .once(\"value\", (snapshot) => {\r\n        if (!snapshot.val()[value]) {\r\n          setUrlToWordValue(\"결과 없음\");\r\n          return;\r\n        }\r\n        setUrlToWordValue(snapshot.val()[value].url);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"headerTitle\">URL to WORD</div>\r\n\r\n      <div className=\"mainTitle\">URL to WORD</div>\r\n      <Search\r\n        placeholder=\"URL 입력\"\r\n        allowClear\r\n        enterButton=\"변환하기\"\r\n        size=\"large\"\r\n        onSearch={onChangeUrlToWord}\r\n        style={{ marginBottom: 20 }}\r\n      />\r\n      <TextArea\r\n        rows={4}\r\n        readOnly\r\n        value={wordToUrlValue}\r\n        style={{ fontSize: 20 }}\r\n      />\r\n\r\n      <div style={{ marginBottom: 40 }} />\r\n\r\n      <div className=\"mainTitle\">WORD to URL</div>\r\n      <Search\r\n        placeholder=\"단어 입력\"\r\n        allowClear\r\n        enterButton=\"변환하기\"\r\n        size=\"large\"\r\n        onSearch={onChangeWordToUrl}\r\n        style={{ marginBottom: 20 }}\r\n      />\r\n      <TextArea\r\n        rows={4}\r\n        readOnly\r\n        value={urlToWordValue}\r\n        style={{ fontSize: 20 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default URLtoWORD;\r\n","C:\\Users\\Sang\\url-to-word\\src\\firebase.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":45,"column":6,"nodeType":"33","endLine":45,"endColumn":12,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'urlValue'. Either include it or remove the dependency array.","ArrayExpression",["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},"Update the dependencies array to be: [data, urlValue]",{"range":"40","text":"41"},[1392,1398],"[data, urlValue]"]